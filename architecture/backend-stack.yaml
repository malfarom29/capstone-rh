AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Template to create EC2 and RDS within a VPC with Docker, Vault, and ECR access

Parameters:
  MyProjectName:
    Description: Name of the project
    Type: String

  MyIPAddress:
    Description: IP address allowed to access the RDS instance (in CIDR notation)
    Type: String
    Default: '54.151.72.106/32' # Replace with your specific IP address

  MyDatabaseName:
    Description: Name of the database
    Type: String
  
  MyDatabaseUser:
    Description: Username for the database
    Type: String

  MyDatabasePassword:
    Description: Password for the database
    NoEcho: true
    Type: String

  SSHKeyName:
    Type: String
    Description: Name of the SSH key

  LatestECSOptimizedAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2023/recommended/image_id

  VPCName:
    Type: String
    Description: Name of the VPC

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.32.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${MyProjectName}-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${MyProjectName}-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.32.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: !Sub ${MyProjectName}-public-subnet-1a

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.32.3.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: !Sub ${MyProjectName}-public-subnet-1b

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.32.2.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub ${MyProjectName}-private-subnet-1a
  
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.32.4.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub ${MyProjectName}-private-subnet-1b

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTable

  PrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  ECSSegurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref MyIPAddress
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '3000'
          ToPort: '3000'
          CidrIp: 10.32.0.0/16

  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Bastion Host Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyIPAddress
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestECSOptimizedAMI
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds: [!Ref BastionHostSecurityGroup]
      KeyName: !Ref SSHKeyName
      Tags:
        - Key: Name
          Value: !Sub ${MyProjectName}-bastion-host
  
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ECSSegurityGroup
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref BastionHostSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Redis Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref ECSSegurityGroup
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: 10.32.0.0/16
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: 'Subnet group for RDS instance'
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref MyDatabaseName
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: postgres
      MasterUsername: !Ref MyDatabaseUser
      MasterUserPassword: !Ref MyDatabasePassword
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref RDSSubnetGroup
      PubliclyAccessible: false
      MultiAZ: false
      Tags:
        - Key: Name
          Value: !Sub ${MyProjectName}-rds-instance

  # ECSInstanceRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: ec2.amazonaws.com
  #           Action: sts:AssumeRole
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
  #     Policies:
  #       - PolicyName: ECSInstanceRolePolicy
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - ecs:CreateCluster
  #                 - ecs:DeregisterContainerInstance
  #                 - ecs:DiscoverPollEndpoint
  #                 - ecs:Poll
  #                 - ecs:RegisterContainerInstance
  #                 - ecs:StartTelemetrySession
  #                 - ecs:Submit*
  #                 - ecr:GetAuthorizationToken
  #                 - ecr:BatchCheckLayerAvailability
  #                 - ecr:GetDownloadUrlForLayer
  #                 - ecr:BatchGetImage
  #                 - logs:CreateLogStream
  #                 - logs:PutLogEvents
  #               Resource: '*'

  # ECSInstanceProfile:
  #   Type: AWS::IAM::InstanceProfile
  #   Properties:
  #     Path: /
  #     Roles:
  #       - !Ref AWSServiceRoleForECS

  ECSLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: ECSCluster
    Properties:
      LaunchTemplateData:
        ImageId: !Ref LatestECSOptimizedAMI
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeviceIndex: 0
            DeleteOnTermination: true
            Groups:
              - !Ref ECSSegurityGroup
        InstanceType: t2.small
        KeyName: !Ref SSHKeyName
        IamInstanceProfile:
          Name: LabInstanceProfile
        UserData: !Base64
          Fn::Sub:
            - |-
              #!/bin/bash
              echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config;
            - ClusterName: !Sub ${MyProjectName}-ecs-cluster
  
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: ECSCluster
    Properties:
      MinSize: '2'
      MaxSize: '3'
      DesiredCapacity: '2'
      LaunchTemplate:
        LaunchTemplateId: !Ref ECSLaunchTemplate
        Version: !GetAtt ECSLaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier: [!GetAtt PublicSubnet1.SubnetId]
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: !Join
            - ' - '
            - - ECS Instance
              - !Sub ${MyProjectName}-ecs-instance

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${MyProjectName}-ecs-cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT
      Tags: []

  EC2CapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref ECSAutoScalingGroup
        ManagedScaling:
          Status: ENABLED
          TargetCapacity: 100
        ManagedTerminationProtection: DISABLED

  ClusterCPAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    DependsOn: ECSCluster
    Properties:
      Cluster: !Ref ECSCluster
      CapacityProviders:
        - !Ref EC2CapacityProvider
      DefaultCapacityProviderStrategy:
        - Base: 0
          Weight: 1
          CapacityProvider: !Ref EC2CapacityProvider

  APIECR:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${MyProjectName}-api

  WorkerECR:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${MyProjectName}-worker

  APIBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${MyProjectName}-lab-api-bucket

Outputs:
  ECSCluster:
    Description: The created cluster.
    Value: !Ref ECSCluster
  RDSInstanceEndpoint:
    Description: Endpoint of the RDS instance
    Value: !GetAtt RDSInstance.Endpoint.Address
  VPCId:
    Description: ID of the VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${MyProjectName}-vpc-id
  PrivateSubnet1Id:
    Description: ID of the private subnet 1
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${MyProjectName}-private-subnet-1a-id
  PrivateSubnet2Id:
    Description: ID of the private subnet 2
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${MyProjectName}-private-subnet-1b-id
  ECSSecurityGroupId:
    Description: ID of the ECS security group
    Value: !Ref ECSSegurityGroup
    Export:
      Name: !Sub ${MyProjectName}-ecs-security-group-id
  PublicRouteTableId:
    Description: ID of the public route table
    Value: !Ref RouteTable
    Export:
      Name: !Sub ${MyProjectName}-public-rtb-id
  PrivateRouteTableId:
    Description: ID of the private route table
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Sub ${MyProjectName}-private-rtb-id
